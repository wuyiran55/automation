package org.bgi.flexlab.automation.task;

import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;
import org.bgi.flexlab.automation.json.WdlOutput;
import org.bgi.flexlab.automation.json.WdlParameter;
import org.bgi.flexlab.automation.json.WdlTask;

import java.io.*;
import java.util.Map;

public class TaskWdlBuilder {
    private static final String INDENT_SIZE = "    ";
    private static final String INDENT_SIZE2 = "        ";
    private static final String SPACE_SIZE = "  ";
    private WdlTask task ;
    private String content ;
    public TaskWdlBuilder(String jsonFile) {
        Gson gson = new Gson() ;
        try {
            Reader jsonReader = new InputStreamReader(new FileInputStream(jsonFile));
            task = gson.fromJson(jsonReader,new TypeToken<WdlTask>(){}.getType()) ;
        }catch (Exception e){
            e.printStackTrace();
        }
    }

    public String getWdlString(){
        String message = "##Generated by BGI.\n##Version : "+task.getVersion()+"\n##Task Description : "+task.getDescription()+"\n" ;
        StringBuilder taskContent = new StringBuilder( "task ");
        taskContent.append(task.getTaskName());
        taskContent.append("\n{\n");

        // parameter section
        Map<String, WdlParameter> parameter = task.getParameter() ;
        for (String key : parameter.keySet()) {
            if (parameter.get(key).isRequired()) {
                taskContent.append(INDENT_SIZE);
                taskContent.append(parameter.get(key).getType()).append(SPACE_SIZE).append(key);
                taskContent.append('\n');
            } else if (parameter.get(key).getDefaultValue() == null) {
                taskContent.append(INDENT_SIZE);
                taskContent.append(parameter.get(key).getType()).append("?").append(SPACE_SIZE).append(key);
                taskContent.append('\n');
            } else {
                String wdlDataType = parameter.get(key).getType();

                taskContent.append(INDENT_SIZE);
                taskContent.append(wdlDataType).append(SPACE_SIZE).append(key);
                taskContent.append(SPACE_SIZE).append("=").append(SPACE_SIZE);

                Object defaultValue = parameter.get(key).getDefaultValue();
                if(wdlDataType.startsWith("Int")){
                    taskContent.append(Integer.parseInt(defaultValue.toString()));
                }else if(wdlDataType.startsWith("Float"))
                    taskContent.append(Float.parseFloat(defaultValue.toString()));
                else if(wdlDataType.startsWith("Boolean"))
                    taskContent.append(Boolean.parseBoolean(defaultValue.toString()));
                else
                    taskContent.append(String.valueOf(defaultValue));

                taskContent.append('\n');
            }
        }

        // command section
        taskContent.append("\n").append(INDENT_SIZE).append("command {\n");
        taskContent.append(INDENT_SIZE2);
        taskContent.append(task.getCommand());
        taskContent.append(INDENT_SIZE).append("}\n");

        // output section
        taskContent.append("\n").append(INDENT_SIZE).append("output {\n");
        Map<String, WdlOutput> outputs  = task.getOutput();
        for (String key : outputs.keySet()) {
            taskContent.append(INDENT_SIZE2);
            taskContent.append(outputs.get(key).getType()).append(SPACE_SIZE).append(key);
            taskContent.append(SPACE_SIZE).append("=").append(SPACE_SIZE).append(outputs.get(key).getExpression());
            taskContent.append('\n');
        }
        taskContent.append(INDENT_SIZE).append("}\n");

        // output section
        taskContent.append("\n").append(INDENT_SIZE).append("runtime {\n");
        if(task.getBackends() != null && !task.getBackends().equals("")){
            taskContent.append(INDENT_SIZE2);
            taskContent.append("backends :").append(SPACE_SIZE).append(task.getBackends());
            taskContent.append('\n');
        }
        if(task.getMaxRetries() != -1){
            taskContent.append(INDENT_SIZE2);
            taskContent.append("maxRetries :").append(SPACE_SIZE).append(task.getMaxRetries());
            taskContent.append('\n');
        }

        if(parameter.containsKey("mem")){
            taskContent.append(INDENT_SIZE2);
            taskContent.append("memory:\"${mem} GB\"");
            taskContent.append('\n');
        }

        if(parameter.containsKey("cpu")){
            taskContent.append(INDENT_SIZE2);
            taskContent.append("cpu:cpu");
            taskContent.append('\n');
        }

        if(parameter.containsKey("queue")){
            taskContent.append(INDENT_SIZE2);
            taskContent.append("sge_queue:queue");
            taskContent.append('\n');
        }
        taskContent.append(INDENT_SIZE).append("}\n");

        taskContent.append("}\n");
        return taskContent.toString();
    }

    public String wdlWriter(String outFile){
        try{
            if (content == null || content.equals("")){
                getWdlString();
            }
            BufferedWriter outWriter = new BufferedWriter(new FileWriter(new File(outFile))) ;
            outWriter.write(content);
            outWriter.close();
        }catch (Exception e){
            e.printStackTrace();
        }
        return null;
    }

}
